<?php


/**
 * Base class that represents a query for the 'persona_scouting' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Fri Mar  4 00:48:23 2011
 *
 * @method     PersonaScoutingQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     PersonaScoutingQuery orderByAnio($order = Criteria::ASC) Order by the anio column
 * @method     PersonaScoutingQuery orderByIdCodigo($order = Criteria::ASC) Order by the id_codigo column
 * @method     PersonaScoutingQuery orderByMes($order = Criteria::ASC) Order by the mes column
 * @method     PersonaScoutingQuery orderByDiaContador($order = Criteria::ASC) Order by the dia_contador column
 * @method     PersonaScoutingQuery orderByFecha($order = Criteria::ASC) Order by the fecha column
 * @method     PersonaScoutingQuery orderByPersonaId($order = Criteria::ASC) Order by the persona_id column
 * @method     PersonaScoutingQuery orderByPeso($order = Criteria::ASC) Order by the peso column
 * @method     PersonaScoutingQuery orderByAltura($order = Criteria::ASC) Order by the altura column
 * @method     PersonaScoutingQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method     PersonaScoutingQuery orderByTelefono($order = Criteria::ASC) Order by the telefono column
 * @method     PersonaScoutingQuery orderByCelular($order = Criteria::ASC) Order by the celular column
 * @method     PersonaScoutingQuery orderByActividades($order = Criteria::ASC) Order by the actividades column
 * @method     PersonaScoutingQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 * @method     PersonaScoutingQuery orderByLugarId($order = Criteria::ASC) Order by the lugar_id column
 * @method     PersonaScoutingQuery orderByNacionalidadId($order = Criteria::ASC) Order by the nacionalidad_id column
 * @method     PersonaScoutingQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     PersonaScoutingQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     PersonaScoutingQuery groupById() Group by the id column
 * @method     PersonaScoutingQuery groupByAnio() Group by the anio column
 * @method     PersonaScoutingQuery groupByIdCodigo() Group by the id_codigo column
 * @method     PersonaScoutingQuery groupByMes() Group by the mes column
 * @method     PersonaScoutingQuery groupByDiaContador() Group by the dia_contador column
 * @method     PersonaScoutingQuery groupByFecha() Group by the fecha column
 * @method     PersonaScoutingQuery groupByPersonaId() Group by the persona_id column
 * @method     PersonaScoutingQuery groupByPeso() Group by the peso column
 * @method     PersonaScoutingQuery groupByAltura() Group by the altura column
 * @method     PersonaScoutingQuery groupByEmail() Group by the email column
 * @method     PersonaScoutingQuery groupByTelefono() Group by the telefono column
 * @method     PersonaScoutingQuery groupByCelular() Group by the celular column
 * @method     PersonaScoutingQuery groupByActividades() Group by the actividades column
 * @method     PersonaScoutingQuery groupByObservaciones() Group by the observaciones column
 * @method     PersonaScoutingQuery groupByLugarId() Group by the lugar_id column
 * @method     PersonaScoutingQuery groupByNacionalidadId() Group by the nacionalidad_id column
 * @method     PersonaScoutingQuery groupByCreatedAt() Group by the created_at column
 * @method     PersonaScoutingQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     PersonaScoutingQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     PersonaScoutingQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     PersonaScoutingQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     PersonaScoutingQuery leftJoinPersona($relationAlias = null) Adds a LEFT JOIN clause to the query using the Persona relation
 * @method     PersonaScoutingQuery rightJoinPersona($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Persona relation
 * @method     PersonaScoutingQuery innerJoinPersona($relationAlias = null) Adds a INNER JOIN clause to the query using the Persona relation
 *
 * @method     PersonaScoutingQuery leftJoinLugar($relationAlias = null) Adds a LEFT JOIN clause to the query using the Lugar relation
 * @method     PersonaScoutingQuery rightJoinLugar($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Lugar relation
 * @method     PersonaScoutingQuery innerJoinLugar($relationAlias = null) Adds a INNER JOIN clause to the query using the Lugar relation
 *
 * @method     PersonaScoutingQuery leftJoinNacionalidad($relationAlias = null) Adds a LEFT JOIN clause to the query using the Nacionalidad relation
 * @method     PersonaScoutingQuery rightJoinNacionalidad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Nacionalidad relation
 * @method     PersonaScoutingQuery innerJoinNacionalidad($relationAlias = null) Adds a INNER JOIN clause to the query using the Nacionalidad relation
 *
 * @method     PersonaScouting findOne(PropelPDO $con = null) Return the first PersonaScouting matching the query
 * @method     PersonaScouting findOneOrCreate(PropelPDO $con = null) Return the first PersonaScouting matching the query, or a new PersonaScouting object populated from the query conditions when no match is found
 *
 * @method     PersonaScouting findOneById(int $id) Return the first PersonaScouting filtered by the id column
 * @method     PersonaScouting findOneByAnio(int $anio) Return the first PersonaScouting filtered by the anio column
 * @method     PersonaScouting findOneByIdCodigo(int $id_codigo) Return the first PersonaScouting filtered by the id_codigo column
 * @method     PersonaScouting findOneByMes(int $mes) Return the first PersonaScouting filtered by the mes column
 * @method     PersonaScouting findOneByDiaContador(int $dia_contador) Return the first PersonaScouting filtered by the dia_contador column
 * @method     PersonaScouting findOneByFecha(string $fecha) Return the first PersonaScouting filtered by the fecha column
 * @method     PersonaScouting findOneByPersonaId(int $persona_id) Return the first PersonaScouting filtered by the persona_id column
 * @method     PersonaScouting findOneByPeso(int $peso) Return the first PersonaScouting filtered by the peso column
 * @method     PersonaScouting findOneByAltura(int $altura) Return the first PersonaScouting filtered by the altura column
 * @method     PersonaScouting findOneByEmail(string $email) Return the first PersonaScouting filtered by the email column
 * @method     PersonaScouting findOneByTelefono(string $telefono) Return the first PersonaScouting filtered by the telefono column
 * @method     PersonaScouting findOneByCelular(string $celular) Return the first PersonaScouting filtered by the celular column
 * @method     PersonaScouting findOneByActividades(string $actividades) Return the first PersonaScouting filtered by the actividades column
 * @method     PersonaScouting findOneByObservaciones(string $observaciones) Return the first PersonaScouting filtered by the observaciones column
 * @method     PersonaScouting findOneByLugarId(int $lugar_id) Return the first PersonaScouting filtered by the lugar_id column
 * @method     PersonaScouting findOneByNacionalidadId(int $nacionalidad_id) Return the first PersonaScouting filtered by the nacionalidad_id column
 * @method     PersonaScouting findOneByCreatedAt(string $created_at) Return the first PersonaScouting filtered by the created_at column
 * @method     PersonaScouting findOneByUpdatedAt(string $updated_at) Return the first PersonaScouting filtered by the updated_at column
 *
 * @method     array findById(int $id) Return PersonaScouting objects filtered by the id column
 * @method     array findByAnio(int $anio) Return PersonaScouting objects filtered by the anio column
 * @method     array findByIdCodigo(int $id_codigo) Return PersonaScouting objects filtered by the id_codigo column
 * @method     array findByMes(int $mes) Return PersonaScouting objects filtered by the mes column
 * @method     array findByDiaContador(int $dia_contador) Return PersonaScouting objects filtered by the dia_contador column
 * @method     array findByFecha(string $fecha) Return PersonaScouting objects filtered by the fecha column
 * @method     array findByPersonaId(int $persona_id) Return PersonaScouting objects filtered by the persona_id column
 * @method     array findByPeso(int $peso) Return PersonaScouting objects filtered by the peso column
 * @method     array findByAltura(int $altura) Return PersonaScouting objects filtered by the altura column
 * @method     array findByEmail(string $email) Return PersonaScouting objects filtered by the email column
 * @method     array findByTelefono(string $telefono) Return PersonaScouting objects filtered by the telefono column
 * @method     array findByCelular(string $celular) Return PersonaScouting objects filtered by the celular column
 * @method     array findByActividades(string $actividades) Return PersonaScouting objects filtered by the actividades column
 * @method     array findByObservaciones(string $observaciones) Return PersonaScouting objects filtered by the observaciones column
 * @method     array findByLugarId(int $lugar_id) Return PersonaScouting objects filtered by the lugar_id column
 * @method     array findByNacionalidadId(int $nacionalidad_id) Return PersonaScouting objects filtered by the nacionalidad_id column
 * @method     array findByCreatedAt(string $created_at) Return PersonaScouting objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return PersonaScouting objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePersonaScoutingQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BasePersonaScoutingQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'PersonaScouting', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new PersonaScoutingQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    PersonaScoutingQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof PersonaScoutingQuery) {
			return $criteria;
		}
		$query = new PersonaScoutingQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PersonaScouting|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = PersonaScoutingPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(PersonaScoutingPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(PersonaScoutingPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(PersonaScoutingPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the anio column
	 * 
	 * @param     int|array $anio The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByAnio($anio = null, $comparison = null)
	{
		if (is_array($anio)) {
			$useMinMax = false;
			if (isset($anio['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::ANIO, $anio['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($anio['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::ANIO, $anio['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::ANIO, $anio, $comparison);
	}

	/**
	 * Filter the query on the id_codigo column
	 * 
	 * @param     int|array $idCodigo The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByIdCodigo($idCodigo = null, $comparison = null)
	{
		if (is_array($idCodigo)) {
			$useMinMax = false;
			if (isset($idCodigo['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::ID_CODIGO, $idCodigo['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idCodigo['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::ID_CODIGO, $idCodigo['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::ID_CODIGO, $idCodigo, $comparison);
	}

	/**
	 * Filter the query on the mes column
	 * 
	 * @param     int|array $mes The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByMes($mes = null, $comparison = null)
	{
		if (is_array($mes)) {
			$useMinMax = false;
			if (isset($mes['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::MES, $mes['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($mes['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::MES, $mes['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::MES, $mes, $comparison);
	}

	/**
	 * Filter the query on the dia_contador column
	 * 
	 * @param     int|array $diaContador The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByDiaContador($diaContador = null, $comparison = null)
	{
		if (is_array($diaContador)) {
			$useMinMax = false;
			if (isset($diaContador['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::DIA_CONTADOR, $diaContador['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($diaContador['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::DIA_CONTADOR, $diaContador['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::DIA_CONTADOR, $diaContador, $comparison);
	}

	/**
	 * Filter the query on the fecha column
	 * 
	 * @param     string|array $fecha The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByFecha($fecha = null, $comparison = null)
	{
		if (is_array($fecha)) {
			$useMinMax = false;
			if (isset($fecha['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::FECHA, $fecha['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($fecha['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::FECHA, $fecha['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::FECHA, $fecha, $comparison);
	}

	/**
	 * Filter the query on the persona_id column
	 * 
	 * @param     int|array $personaId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByPersonaId($personaId = null, $comparison = null)
	{
		if (is_array($personaId)) {
			$useMinMax = false;
			if (isset($personaId['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::PERSONA_ID, $personaId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($personaId['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::PERSONA_ID, $personaId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::PERSONA_ID, $personaId, $comparison);
	}

	/**
	 * Filter the query on the peso column
	 * 
	 * @param     int|array $peso The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByPeso($peso = null, $comparison = null)
	{
		if (is_array($peso)) {
			$useMinMax = false;
			if (isset($peso['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::PESO, $peso['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($peso['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::PESO, $peso['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::PESO, $peso, $comparison);
	}

	/**
	 * Filter the query on the altura column
	 * 
	 * @param     int|array $altura The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByAltura($altura = null, $comparison = null)
	{
		if (is_array($altura)) {
			$useMinMax = false;
			if (isset($altura['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::ALTURA, $altura['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($altura['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::ALTURA, $altura['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::ALTURA, $altura, $comparison);
	}

	/**
	 * Filter the query on the email column
	 * 
	 * @param     string $email The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByEmail($email = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($email)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $email)) {
				$email = str_replace('*', '%', $email);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::EMAIL, $email, $comparison);
	}

	/**
	 * Filter the query on the telefono column
	 * 
	 * @param     string $telefono The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByTelefono($telefono = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($telefono)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $telefono)) {
				$telefono = str_replace('*', '%', $telefono);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::TELEFONO, $telefono, $comparison);
	}

	/**
	 * Filter the query on the celular column
	 * 
	 * @param     string $celular The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByCelular($celular = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($celular)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $celular)) {
				$celular = str_replace('*', '%', $celular);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::CELULAR, $celular, $comparison);
	}

	/**
	 * Filter the query on the actividades column
	 * 
	 * @param     string $actividades The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByActividades($actividades = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($actividades)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $actividades)) {
				$actividades = str_replace('*', '%', $actividades);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::ACTIVIDADES, $actividades, $comparison);
	}

	/**
	 * Filter the query on the observaciones column
	 * 
	 * @param     string $observaciones The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByObservaciones($observaciones = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($observaciones)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $observaciones)) {
				$observaciones = str_replace('*', '%', $observaciones);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::OBSERVACIONES, $observaciones, $comparison);
	}

	/**
	 * Filter the query on the lugar_id column
	 * 
	 * @param     int|array $lugarId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByLugarId($lugarId = null, $comparison = null)
	{
		if (is_array($lugarId)) {
			$useMinMax = false;
			if (isset($lugarId['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::LUGAR_ID, $lugarId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($lugarId['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::LUGAR_ID, $lugarId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::LUGAR_ID, $lugarId, $comparison);
	}

	/**
	 * Filter the query on the nacionalidad_id column
	 * 
	 * @param     int|array $nacionalidadId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByNacionalidadId($nacionalidadId = null, $comparison = null)
	{
		if (is_array($nacionalidadId)) {
			$useMinMax = false;
			if (isset($nacionalidadId['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::NACIONALIDAD_ID, $nacionalidadId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($nacionalidadId['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::NACIONALIDAD_ID, $nacionalidadId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::NACIONALIDAD_ID, $nacionalidadId, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $createdAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 * 
	 * @param     string|array $updatedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(PersonaScoutingPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(PersonaScoutingPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PersonaScoutingPeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related Persona object
	 *
	 * @param     Persona $persona  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByPersona($persona, $comparison = null)
	{
		return $this
			->addUsingAlias(PersonaScoutingPeer::PERSONA_ID, $persona->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Persona relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function joinPersona($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Persona');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Persona');
		}
		
		return $this;
	}

	/**
	 * Use the Persona relation Persona object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PersonaQuery A secondary query class using the current class as primary query
	 */
	public function usePersonaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPersona($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Persona', 'PersonaQuery');
	}

	/**
	 * Filter the query by a related Lugar object
	 *
	 * @param     Lugar $lugar  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByLugar($lugar, $comparison = null)
	{
		return $this
			->addUsingAlias(PersonaScoutingPeer::LUGAR_ID, $lugar->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Lugar relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function joinLugar($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Lugar');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Lugar');
		}
		
		return $this;
	}

	/**
	 * Use the Lugar relation Lugar object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LugarQuery A secondary query class using the current class as primary query
	 */
	public function useLugarQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinLugar($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Lugar', 'LugarQuery');
	}

	/**
	 * Filter the query by a related Nacionalidad object
	 *
	 * @param     Nacionalidad $nacionalidad  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function filterByNacionalidad($nacionalidad, $comparison = null)
	{
		return $this
			->addUsingAlias(PersonaScoutingPeer::NACIONALIDAD_ID, $nacionalidad->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Nacionalidad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function joinNacionalidad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Nacionalidad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Nacionalidad');
		}
		
		return $this;
	}

	/**
	 * Use the Nacionalidad relation Nacionalidad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    NacionalidadQuery A secondary query class using the current class as primary query
	 */
	public function useNacionalidadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinNacionalidad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Nacionalidad', 'NacionalidadQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     PersonaScouting $personaScouting Object to remove from the list of results
	 *
	 * @return    PersonaScoutingQuery The current query, for fluid interface
	 */
	public function prune($personaScouting = null)
	{
		if ($personaScouting) {
			$this->addUsingAlias(PersonaScoutingPeer::ID, $personaScouting->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BasePersonaScoutingQuery
