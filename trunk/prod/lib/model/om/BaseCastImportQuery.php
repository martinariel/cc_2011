<?php


/**
 * Base class that represents a query for the 'cast_import' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Fri Mar  4 00:48:23 2011
 *
 * @method     CastImportQuery orderByCodigo($order = Criteria::ASC) Order by the codigo column
 * @method     CastImportQuery orderByNombre($order = Criteria::ASC) Order by the nombre column
 * @method     CastImportQuery orderByAgencia($order = Criteria::ASC) Order by the agencia column
 * @method     CastImportQuery orderByPantalon($order = Criteria::ASC) Order by the pantalon column
 * @method     CastImportQuery orderByCamisa($order = Criteria::ASC) Order by the camisa column
 * @method     CastImportQuery orderByCalzado($order = Criteria::ASC) Order by the calzado column
 * @method     CastImportQuery orderByAltura($order = Criteria::ASC) Order by the altura column
 * @method     CastImportQuery orderByPeso($order = Criteria::ASC) Order by the peso column
 * @method     CastImportQuery orderByFechaNacimiento($order = Criteria::ASC) Order by the fecha_nacimiento column
 * @method     CastImportQuery orderByFechaCasting($order = Criteria::ASC) Order by the fecha_casting column
 * @method     CastImportQuery orderByCasting($order = Criteria::ASC) Order by the casting column
 * @method     CastImportQuery orderByAnio($order = Criteria::ASC) Order by the anio column
 * @method     CastImportQuery orderByMedidas($order = Criteria::ASC) Order by the medidas column
 * @method     CastImportQuery orderByDni($order = Criteria::ASC) Order by the dni column
 * @method     CastImportQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 * @method     CastImportQuery orderByTelefono($order = Criteria::ASC) Order by the telefono column
 * @method     CastImportQuery orderByCelular($order = Criteria::ASC) Order by the celular column
 * @method     CastImportQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method     CastImportQuery orderByEdad($order = Criteria::ASC) Order by the edad column
 * @method     CastImportQuery orderByDia($order = Criteria::ASC) Order by the dia column
 * @method     CastImportQuery orderById($order = Criteria::ASC) Order by the id column
 *
 * @method     CastImportQuery groupByCodigo() Group by the codigo column
 * @method     CastImportQuery groupByNombre() Group by the nombre column
 * @method     CastImportQuery groupByAgencia() Group by the agencia column
 * @method     CastImportQuery groupByPantalon() Group by the pantalon column
 * @method     CastImportQuery groupByCamisa() Group by the camisa column
 * @method     CastImportQuery groupByCalzado() Group by the calzado column
 * @method     CastImportQuery groupByAltura() Group by the altura column
 * @method     CastImportQuery groupByPeso() Group by the peso column
 * @method     CastImportQuery groupByFechaNacimiento() Group by the fecha_nacimiento column
 * @method     CastImportQuery groupByFechaCasting() Group by the fecha_casting column
 * @method     CastImportQuery groupByCasting() Group by the casting column
 * @method     CastImportQuery groupByAnio() Group by the anio column
 * @method     CastImportQuery groupByMedidas() Group by the medidas column
 * @method     CastImportQuery groupByDni() Group by the dni column
 * @method     CastImportQuery groupByObservaciones() Group by the observaciones column
 * @method     CastImportQuery groupByTelefono() Group by the telefono column
 * @method     CastImportQuery groupByCelular() Group by the celular column
 * @method     CastImportQuery groupByEmail() Group by the email column
 * @method     CastImportQuery groupByEdad() Group by the edad column
 * @method     CastImportQuery groupByDia() Group by the dia column
 * @method     CastImportQuery groupById() Group by the id column
 *
 * @method     CastImportQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     CastImportQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     CastImportQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     CastImport findOne(PropelPDO $con = null) Return the first CastImport matching the query
 * @method     CastImport findOneOrCreate(PropelPDO $con = null) Return the first CastImport matching the query, or a new CastImport object populated from the query conditions when no match is found
 *
 * @method     CastImport findOneByCodigo(int $codigo) Return the first CastImport filtered by the codigo column
 * @method     CastImport findOneByNombre(string $nombre) Return the first CastImport filtered by the nombre column
 * @method     CastImport findOneByAgencia(string $agencia) Return the first CastImport filtered by the agencia column
 * @method     CastImport findOneByPantalon(string $pantalon) Return the first CastImport filtered by the pantalon column
 * @method     CastImport findOneByCamisa(string $camisa) Return the first CastImport filtered by the camisa column
 * @method     CastImport findOneByCalzado(int $calzado) Return the first CastImport filtered by the calzado column
 * @method     CastImport findOneByAltura(int $altura) Return the first CastImport filtered by the altura column
 * @method     CastImport findOneByPeso(int $peso) Return the first CastImport filtered by the peso column
 * @method     CastImport findOneByFechaNacimiento(string $fecha_nacimiento) Return the first CastImport filtered by the fecha_nacimiento column
 * @method     CastImport findOneByFechaCasting(string $fecha_casting) Return the first CastImport filtered by the fecha_casting column
 * @method     CastImport findOneByCasting(string $casting) Return the first CastImport filtered by the casting column
 * @method     CastImport findOneByAnio(int $anio) Return the first CastImport filtered by the anio column
 * @method     CastImport findOneByMedidas(string $medidas) Return the first CastImport filtered by the medidas column
 * @method     CastImport findOneByDni(string $dni) Return the first CastImport filtered by the dni column
 * @method     CastImport findOneByObservaciones(string $observaciones) Return the first CastImport filtered by the observaciones column
 * @method     CastImport findOneByTelefono(string $telefono) Return the first CastImport filtered by the telefono column
 * @method     CastImport findOneByCelular(string $celular) Return the first CastImport filtered by the celular column
 * @method     CastImport findOneByEmail(string $email) Return the first CastImport filtered by the email column
 * @method     CastImport findOneByEdad(int $edad) Return the first CastImport filtered by the edad column
 * @method     CastImport findOneByDia(string $dia) Return the first CastImport filtered by the dia column
 * @method     CastImport findOneById(int $id) Return the first CastImport filtered by the id column
 *
 * @method     array findByCodigo(int $codigo) Return CastImport objects filtered by the codigo column
 * @method     array findByNombre(string $nombre) Return CastImport objects filtered by the nombre column
 * @method     array findByAgencia(string $agencia) Return CastImport objects filtered by the agencia column
 * @method     array findByPantalon(string $pantalon) Return CastImport objects filtered by the pantalon column
 * @method     array findByCamisa(string $camisa) Return CastImport objects filtered by the camisa column
 * @method     array findByCalzado(int $calzado) Return CastImport objects filtered by the calzado column
 * @method     array findByAltura(int $altura) Return CastImport objects filtered by the altura column
 * @method     array findByPeso(int $peso) Return CastImport objects filtered by the peso column
 * @method     array findByFechaNacimiento(string $fecha_nacimiento) Return CastImport objects filtered by the fecha_nacimiento column
 * @method     array findByFechaCasting(string $fecha_casting) Return CastImport objects filtered by the fecha_casting column
 * @method     array findByCasting(string $casting) Return CastImport objects filtered by the casting column
 * @method     array findByAnio(int $anio) Return CastImport objects filtered by the anio column
 * @method     array findByMedidas(string $medidas) Return CastImport objects filtered by the medidas column
 * @method     array findByDni(string $dni) Return CastImport objects filtered by the dni column
 * @method     array findByObservaciones(string $observaciones) Return CastImport objects filtered by the observaciones column
 * @method     array findByTelefono(string $telefono) Return CastImport objects filtered by the telefono column
 * @method     array findByCelular(string $celular) Return CastImport objects filtered by the celular column
 * @method     array findByEmail(string $email) Return CastImport objects filtered by the email column
 * @method     array findByEdad(int $edad) Return CastImport objects filtered by the edad column
 * @method     array findByDia(string $dia) Return CastImport objects filtered by the dia column
 * @method     array findById(int $id) Return CastImport objects filtered by the id column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseCastImportQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseCastImportQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'CastImport', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new CastImportQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    CastImportQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof CastImportQuery) {
			return $criteria;
		}
		$query = new CastImportQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    CastImport|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = CastImportPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(CastImportPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(CastImportPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the codigo column
	 * 
	 * @param     int|array $codigo The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByCodigo($codigo = null, $comparison = null)
	{
		if (is_array($codigo)) {
			$useMinMax = false;
			if (isset($codigo['min'])) {
				$this->addUsingAlias(CastImportPeer::CODIGO, $codigo['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($codigo['max'])) {
				$this->addUsingAlias(CastImportPeer::CODIGO, $codigo['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(CastImportPeer::CODIGO, $codigo, $comparison);
	}

	/**
	 * Filter the query on the nombre column
	 * 
	 * @param     string $nombre The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByNombre($nombre = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombre)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombre)) {
				$nombre = str_replace('*', '%', $nombre);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::NOMBRE, $nombre, $comparison);
	}

	/**
	 * Filter the query on the agencia column
	 * 
	 * @param     string $agencia The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByAgencia($agencia = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($agencia)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $agencia)) {
				$agencia = str_replace('*', '%', $agencia);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::AGENCIA, $agencia, $comparison);
	}

	/**
	 * Filter the query on the pantalon column
	 * 
	 * @param     string $pantalon The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByPantalon($pantalon = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($pantalon)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $pantalon)) {
				$pantalon = str_replace('*', '%', $pantalon);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::PANTALON, $pantalon, $comparison);
	}

	/**
	 * Filter the query on the camisa column
	 * 
	 * @param     string $camisa The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByCamisa($camisa = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($camisa)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $camisa)) {
				$camisa = str_replace('*', '%', $camisa);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::CAMISA, $camisa, $comparison);
	}

	/**
	 * Filter the query on the calzado column
	 * 
	 * @param     int|array $calzado The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByCalzado($calzado = null, $comparison = null)
	{
		if (is_array($calzado)) {
			$useMinMax = false;
			if (isset($calzado['min'])) {
				$this->addUsingAlias(CastImportPeer::CALZADO, $calzado['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($calzado['max'])) {
				$this->addUsingAlias(CastImportPeer::CALZADO, $calzado['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(CastImportPeer::CALZADO, $calzado, $comparison);
	}

	/**
	 * Filter the query on the altura column
	 * 
	 * @param     int|array $altura The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByAltura($altura = null, $comparison = null)
	{
		if (is_array($altura)) {
			$useMinMax = false;
			if (isset($altura['min'])) {
				$this->addUsingAlias(CastImportPeer::ALTURA, $altura['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($altura['max'])) {
				$this->addUsingAlias(CastImportPeer::ALTURA, $altura['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(CastImportPeer::ALTURA, $altura, $comparison);
	}

	/**
	 * Filter the query on the peso column
	 * 
	 * @param     int|array $peso The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByPeso($peso = null, $comparison = null)
	{
		if (is_array($peso)) {
			$useMinMax = false;
			if (isset($peso['min'])) {
				$this->addUsingAlias(CastImportPeer::PESO, $peso['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($peso['max'])) {
				$this->addUsingAlias(CastImportPeer::PESO, $peso['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(CastImportPeer::PESO, $peso, $comparison);
	}

	/**
	 * Filter the query on the fecha_nacimiento column
	 * 
	 * @param     string $fechaNacimiento The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByFechaNacimiento($fechaNacimiento = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($fechaNacimiento)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $fechaNacimiento)) {
				$fechaNacimiento = str_replace('*', '%', $fechaNacimiento);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::FECHA_NACIMIENTO, $fechaNacimiento, $comparison);
	}

	/**
	 * Filter the query on the fecha_casting column
	 * 
	 * @param     string $fechaCasting The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByFechaCasting($fechaCasting = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($fechaCasting)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $fechaCasting)) {
				$fechaCasting = str_replace('*', '%', $fechaCasting);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::FECHA_CASTING, $fechaCasting, $comparison);
	}

	/**
	 * Filter the query on the casting column
	 * 
	 * @param     string $casting The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByCasting($casting = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($casting)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $casting)) {
				$casting = str_replace('*', '%', $casting);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::CASTING, $casting, $comparison);
	}

	/**
	 * Filter the query on the anio column
	 * 
	 * @param     int|array $anio The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByAnio($anio = null, $comparison = null)
	{
		if (is_array($anio)) {
			$useMinMax = false;
			if (isset($anio['min'])) {
				$this->addUsingAlias(CastImportPeer::ANIO, $anio['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($anio['max'])) {
				$this->addUsingAlias(CastImportPeer::ANIO, $anio['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(CastImportPeer::ANIO, $anio, $comparison);
	}

	/**
	 * Filter the query on the medidas column
	 * 
	 * @param     string $medidas The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByMedidas($medidas = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($medidas)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $medidas)) {
				$medidas = str_replace('*', '%', $medidas);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::MEDIDAS, $medidas, $comparison);
	}

	/**
	 * Filter the query on the dni column
	 * 
	 * @param     string $dni The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByDni($dni = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($dni)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $dni)) {
				$dni = str_replace('*', '%', $dni);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::DNI, $dni, $comparison);
	}

	/**
	 * Filter the query on the observaciones column
	 * 
	 * @param     string $observaciones The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByObservaciones($observaciones = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($observaciones)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $observaciones)) {
				$observaciones = str_replace('*', '%', $observaciones);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::OBSERVACIONES, $observaciones, $comparison);
	}

	/**
	 * Filter the query on the telefono column
	 * 
	 * @param     string $telefono The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByTelefono($telefono = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($telefono)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $telefono)) {
				$telefono = str_replace('*', '%', $telefono);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::TELEFONO, $telefono, $comparison);
	}

	/**
	 * Filter the query on the celular column
	 * 
	 * @param     string $celular The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByCelular($celular = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($celular)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $celular)) {
				$celular = str_replace('*', '%', $celular);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::CELULAR, $celular, $comparison);
	}

	/**
	 * Filter the query on the email column
	 * 
	 * @param     string $email The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByEmail($email = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($email)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $email)) {
				$email = str_replace('*', '%', $email);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::EMAIL, $email, $comparison);
	}

	/**
	 * Filter the query on the edad column
	 * 
	 * @param     int|array $edad The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByEdad($edad = null, $comparison = null)
	{
		if (is_array($edad)) {
			$useMinMax = false;
			if (isset($edad['min'])) {
				$this->addUsingAlias(CastImportPeer::EDAD, $edad['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($edad['max'])) {
				$this->addUsingAlias(CastImportPeer::EDAD, $edad['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(CastImportPeer::EDAD, $edad, $comparison);
	}

	/**
	 * Filter the query on the dia column
	 * 
	 * @param     string $dia The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterByDia($dia = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($dia)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $dia)) {
				$dia = str_replace('*', '%', $dia);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(CastImportPeer::DIA, $dia, $comparison);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(CastImportPeer::ID, $id, $comparison);
	}

	/**
	 * Exclude object from result
	 *
	 * @param     CastImport $castImport Object to remove from the list of results
	 *
	 * @return    CastImportQuery The current query, for fluid interface
	 */
	public function prune($castImport = null)
	{
		if ($castImport) {
			$this->addUsingAlias(CastImportPeer::ID, $castImport->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseCastImportQuery
