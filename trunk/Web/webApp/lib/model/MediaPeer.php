<?php


/**
 * Skeleton subclass for performing query and update operations on the 'media' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 01/22/11 21:25:07
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class MediaPeer extends BaseMediaPeer {

	const MEDIA_PATH = "/home/upload/";
	const DEST_PATH  = "/home/cc/web/storage/";
	const DIR_SEPARATOR = "/";
	
	private static function doMedia ( Persona $persona , $code )
	{
		$files = scandir(self::MEDIA_PATH);
		
		$dest_path = self::DEST_PATH . $persona->getId();
		
		if ( !is_dir ( $dest_path))
			mkdir($dest_path);
		
		$returnValue = array();
		
		$tiempo = time();
		
		$orden = 0;
		foreach ( $files as $file )
		{
			if ( strpos($file, $code . '_' ) !== false && strpos($file, $code . '_' ) == 0 )
			{
				$ext = pathinfo($file , PATHINFO_EXTENSION);
				
				$newname = $dest_path . self::DIR_SEPARATOR . $tiempo . "_" . (++$orden) . '.' . $ext;
							
				rename( self::MEDIA_PATH . $file , $newname); 
				
				$media = new Media();
				$media->setArchivo(  $newname );
				$media->setPersona( $persona );
				$media->setTipo( $ext  );
				$media->setOrden( $orden );
				$returnValue[] = $media;
			}
		}
		
		return $returnValue;
	}
	
	private static function imagenPrincipal (Persona $persona , $mediaList )
	{
		$path = '';
		
		foreach ($mediaList as $media )
		{
			if ( $media->getTipo() == 'JPG' )
			{
				$path = $media->getArchivo();
				break;
			}
		}
		
		
/*		if ( $path != '' )
		{
			 $image = new SimpleImage();
		     $image->load( $path );
		     $image->scale(20);
		     
		     echo dirname($path) . self::DIR_SEPARATOR . 'principal.jpg';
		     
		     $image->save( dirname($path) . self::DIR_SEPARATOR . 'principal.jpg' ); 
		}*/
		
	}
	
	public static function doMediaScout (PersonaScouting $personaScout, ScoutImport $si , $f_new )
	{
		$code = $si->getCodigo();

		$mediaList = self::doMedia($personaScout->getPersona() , $code );
		
		foreach ( $mediaList as $media )
		{
			$media->setPersonasScoutingId ( $personaScout->getId() );
			
            if ( $f_new && $media->getOrden === 0 )
                GlobalFunctions::makeFotoPrincipal( $media );
            
            $media->save();
		}
		
        // TODO Clean
		/*if ( $f_new )
			self::imagenPrincipal( $personaScout->getPersona() , $mediaList );*/
		
	}
	
	public static function doMediaCast (PersonaCasting $personaCast , CastImport $ci , $f_new  )
	{
	    $code = $ci->getCodigo();

		$mediaList = self::doMedia($personaCast->getPersona() , $code );
		
		foreach ( $mediaList as $media )
		{
			$media->setPersonasCastingId ( $personaCast->getId() );
            
            if ( $f_new && $media->getOrden === 0 )
                GlobalFunctions::makeFotoPrincipal( $media );

            $media->save();
		}	
		
        // TODO: Clean
		/*if ( $f_new )
			self::imagenPrincipal( $personaCast->getPersona() , $mediaList );*/
	} 
	
	public static function clean()
	{
		$files = scandir(self::MEDIA_PATH);
		
		foreach ( $files as $file )
		{
			if ( !is_dir ( self::MEDIA_PATH . self::DIR_SEPARATOR . $file  ) )
			{
				unlink ( self::MEDIA_PATH . self::DIR_SEPARATOR . $file  );
			}
		}
	}
    
    public static function retrieveFotoPrincipal( $persona )
    {
        $c = new Criteria();
        $c->add( self::PERSONA_ID, $persona->getId(), Criteria::EQUAL );
        $c->add( self::ORDEN, -1, Criteria::EQUAL );
        
        return self::doSelectOne( $c );
    }
	
} // MediaPeer
