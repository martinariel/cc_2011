<?php


/**
 * Base class that represents a row from the 'scout_import' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Fri Mar  4 00:48:23 2011
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseScoutImport extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'ScoutImportPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ScoutImportPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the codigo field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $codigo;

	/**
	 * The value for the edad field.
	 * @var        int
	 */
	protected $edad;

	/**
	 * The value for the peso field.
	 * @var        int
	 */
	protected $peso;

	/**
	 * The value for the altura field.
	 * @var        int
	 */
	protected $altura;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the fecha_nacimiento field.
	 * @var        string
	 */
	protected $fecha_nacimiento;

	/**
	 * The value for the fecha_scout field.
	 * @var        string
	 */
	protected $fecha_scout;

	/**
	 * The value for the lugar_scout field.
	 * @var        string
	 */
	protected $lugar_scout;

	/**
	 * The value for the observaciones field.
	 * @var        string
	 */
	protected $observaciones;

	/**
	 * The value for the actividades field.
	 * @var        string
	 */
	protected $actividades;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the nacionalidad field.
	 * @var        string
	 */
	protected $nacionalidad;

	/**
	 * The value for the idiomas field.
	 * @var        string
	 */
	protected $idiomas;

	/**
	 * The value for the xls_file field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $xls_file;

	/**
	 * The value for the anio field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $anio;

	/**
	 * The value for the mes field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $mes;

	/**
	 * The value for the codigo_agrupador field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $codigo_agrupador;

	/**
	 * The value for the dia field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $dia;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->codigo = 0;
		$this->xls_file = '';
		$this->anio = 0;
		$this->mes = '';
		$this->codigo_agrupador = '';
		$this->dia = '';
	}

	/**
	 * Initializes internal state of BaseScoutImport object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [codigo] column value.
	 * 
	 * @return     int
	 */
	public function getCodigo()
	{
		return $this->codigo;
	}

	/**
	 * Get the [edad] column value.
	 * 
	 * @return     int
	 */
	public function getEdad()
	{
		return $this->edad;
	}

	/**
	 * Get the [peso] column value.
	 * 
	 * @return     int
	 */
	public function getPeso()
	{
		return $this->peso;
	}

	/**
	 * Get the [altura] column value.
	 * 
	 * @return     int
	 */
	public function getAltura()
	{
		return $this->altura;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [fecha_nacimiento] column value.
	 * 
	 * @return     string
	 */
	public function getFechaNacimiento()
	{
		return $this->fecha_nacimiento;
	}

	/**
	 * Get the [fecha_scout] column value.
	 * 
	 * @return     string
	 */
	public function getFechaScout()
	{
		return $this->fecha_scout;
	}

	/**
	 * Get the [lugar_scout] column value.
	 * 
	 * @return     string
	 */
	public function getLugarScout()
	{
		return $this->lugar_scout;
	}

	/**
	 * Get the [observaciones] column value.
	 * 
	 * @return     string
	 */
	public function getObservaciones()
	{
		return $this->observaciones;
	}

	/**
	 * Get the [actividades] column value.
	 * 
	 * @return     string
	 */
	public function getActividades()
	{
		return $this->actividades;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [telefono] column value.
	 * 
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [celular] column value.
	 * 
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [nacionalidad] column value.
	 * 
	 * @return     string
	 */
	public function getNacionalidad()
	{
		return $this->nacionalidad;
	}

	/**
	 * Get the [idiomas] column value.
	 * 
	 * @return     string
	 */
	public function getIdiomas()
	{
		return $this->idiomas;
	}

	/**
	 * Get the [xls_file] column value.
	 * 
	 * @return     string
	 */
	public function getXlsFile()
	{
		return $this->xls_file;
	}

	/**
	 * Get the [anio] column value.
	 * 
	 * @return     int
	 */
	public function getAnio()
	{
		return $this->anio;
	}

	/**
	 * Get the [mes] column value.
	 * 
	 * @return     string
	 */
	public function getMes()
	{
		return $this->mes;
	}

	/**
	 * Get the [codigo_agrupador] column value.
	 * 
	 * @return     string
	 */
	public function getCodigoAgrupador()
	{
		return $this->codigo_agrupador;
	}

	/**
	 * Get the [dia] column value.
	 * 
	 * @return     string
	 */
	public function getDia()
	{
		return $this->dia;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ScoutImportPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [codigo] column.
	 * 
	 * @param      int $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setCodigo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo !== $v || $this->isNew()) {
			$this->codigo = $v;
			$this->modifiedColumns[] = ScoutImportPeer::CODIGO;
		}

		return $this;
	} // setCodigo()

	/**
	 * Set the value of [edad] column.
	 * 
	 * @param      int $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setEdad($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->edad !== $v) {
			$this->edad = $v;
			$this->modifiedColumns[] = ScoutImportPeer::EDAD;
		}

		return $this;
	} // setEdad()

	/**
	 * Set the value of [peso] column.
	 * 
	 * @param      int $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setPeso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->peso !== $v) {
			$this->peso = $v;
			$this->modifiedColumns[] = ScoutImportPeer::PESO;
		}

		return $this;
	} // setPeso()

	/**
	 * Set the value of [altura] column.
	 * 
	 * @param      int $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setAltura($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->altura !== $v) {
			$this->altura = $v;
			$this->modifiedColumns[] = ScoutImportPeer::ALTURA;
		}

		return $this;
	} // setAltura()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = ScoutImportPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [fecha_nacimiento] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setFechaNacimiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fecha_nacimiento !== $v) {
			$this->fecha_nacimiento = $v;
			$this->modifiedColumns[] = ScoutImportPeer::FECHA_NACIMIENTO;
		}

		return $this;
	} // setFechaNacimiento()

	/**
	 * Set the value of [fecha_scout] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setFechaScout($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fecha_scout !== $v) {
			$this->fecha_scout = $v;
			$this->modifiedColumns[] = ScoutImportPeer::FECHA_SCOUT;
		}

		return $this;
	} // setFechaScout()

	/**
	 * Set the value of [lugar_scout] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setLugarScout($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lugar_scout !== $v) {
			$this->lugar_scout = $v;
			$this->modifiedColumns[] = ScoutImportPeer::LUGAR_SCOUT;
		}

		return $this;
	} // setLugarScout()

	/**
	 * Set the value of [observaciones] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setObservaciones($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observaciones !== $v) {
			$this->observaciones = $v;
			$this->modifiedColumns[] = ScoutImportPeer::OBSERVACIONES;
		}

		return $this;
	} // setObservaciones()

	/**
	 * Set the value of [actividades] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setActividades($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->actividades !== $v) {
			$this->actividades = $v;
			$this->modifiedColumns[] = ScoutImportPeer::ACTIVIDADES;
		}

		return $this;
	} // setActividades()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = ScoutImportPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [telefono] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = ScoutImportPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [celular] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = ScoutImportPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [nacionalidad] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setNacionalidad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nacionalidad !== $v) {
			$this->nacionalidad = $v;
			$this->modifiedColumns[] = ScoutImportPeer::NACIONALIDAD;
		}

		return $this;
	} // setNacionalidad()

	/**
	 * Set the value of [idiomas] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setIdiomas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->idiomas !== $v) {
			$this->idiomas = $v;
			$this->modifiedColumns[] = ScoutImportPeer::IDIOMAS;
		}

		return $this;
	} // setIdiomas()

	/**
	 * Set the value of [xls_file] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setXlsFile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->xls_file !== $v || $this->isNew()) {
			$this->xls_file = $v;
			$this->modifiedColumns[] = ScoutImportPeer::XLS_FILE;
		}

		return $this;
	} // setXlsFile()

	/**
	 * Set the value of [anio] column.
	 * 
	 * @param      int $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setAnio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->anio !== $v || $this->isNew()) {
			$this->anio = $v;
			$this->modifiedColumns[] = ScoutImportPeer::ANIO;
		}

		return $this;
	} // setAnio()

	/**
	 * Set the value of [mes] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setMes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mes !== $v || $this->isNew()) {
			$this->mes = $v;
			$this->modifiedColumns[] = ScoutImportPeer::MES;
		}

		return $this;
	} // setMes()

	/**
	 * Set the value of [codigo_agrupador] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setCodigoAgrupador($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo_agrupador !== $v || $this->isNew()) {
			$this->codigo_agrupador = $v;
			$this->modifiedColumns[] = ScoutImportPeer::CODIGO_AGRUPADOR;
		}

		return $this;
	} // setCodigoAgrupador()

	/**
	 * Set the value of [dia] column.
	 * 
	 * @param      string $v new value
	 * @return     ScoutImport The current object (for fluent API support)
	 */
	public function setDia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dia !== $v || $this->isNew()) {
			$this->dia = $v;
			$this->modifiedColumns[] = ScoutImportPeer::DIA;
		}

		return $this;
	} // setDia()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->codigo !== 0) {
				return false;
			}

			if ($this->xls_file !== '') {
				return false;
			}

			if ($this->anio !== 0) {
				return false;
			}

			if ($this->mes !== '') {
				return false;
			}

			if ($this->codigo_agrupador !== '') {
				return false;
			}

			if ($this->dia !== '') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->codigo = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->edad = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->peso = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->altura = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->nombre = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->fecha_nacimiento = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->fecha_scout = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->lugar_scout = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->observaciones = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->actividades = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->email = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->telefono = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->celular = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->nacionalidad = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->idiomas = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->xls_file = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->anio = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->mes = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->codigo_agrupador = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->dia = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 21; // 21 = ScoutImportPeer::NUM_COLUMNS - ScoutImportPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ScoutImport object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ScoutImportPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ScoutImportPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ScoutImportPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseScoutImport:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				ScoutImportQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseScoutImport:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ScoutImportPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseScoutImport:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseScoutImport:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ScoutImportPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ScoutImportPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(ScoutImportPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.ScoutImportPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows = 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows = ScoutImportPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ScoutImportPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ScoutImportPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCodigo();
				break;
			case 2:
				return $this->getEdad();
				break;
			case 3:
				return $this->getPeso();
				break;
			case 4:
				return $this->getAltura();
				break;
			case 5:
				return $this->getNombre();
				break;
			case 6:
				return $this->getFechaNacimiento();
				break;
			case 7:
				return $this->getFechaScout();
				break;
			case 8:
				return $this->getLugarScout();
				break;
			case 9:
				return $this->getObservaciones();
				break;
			case 10:
				return $this->getActividades();
				break;
			case 11:
				return $this->getEmail();
				break;
			case 12:
				return $this->getTelefono();
				break;
			case 13:
				return $this->getCelular();
				break;
			case 14:
				return $this->getNacionalidad();
				break;
			case 15:
				return $this->getIdiomas();
				break;
			case 16:
				return $this->getXlsFile();
				break;
			case 17:
				return $this->getAnio();
				break;
			case 18:
				return $this->getMes();
				break;
			case 19:
				return $this->getCodigoAgrupador();
				break;
			case 20:
				return $this->getDia();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ScoutImportPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCodigo(),
			$keys[2] => $this->getEdad(),
			$keys[3] => $this->getPeso(),
			$keys[4] => $this->getAltura(),
			$keys[5] => $this->getNombre(),
			$keys[6] => $this->getFechaNacimiento(),
			$keys[7] => $this->getFechaScout(),
			$keys[8] => $this->getLugarScout(),
			$keys[9] => $this->getObservaciones(),
			$keys[10] => $this->getActividades(),
			$keys[11] => $this->getEmail(),
			$keys[12] => $this->getTelefono(),
			$keys[13] => $this->getCelular(),
			$keys[14] => $this->getNacionalidad(),
			$keys[15] => $this->getIdiomas(),
			$keys[16] => $this->getXlsFile(),
			$keys[17] => $this->getAnio(),
			$keys[18] => $this->getMes(),
			$keys[19] => $this->getCodigoAgrupador(),
			$keys[20] => $this->getDia(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ScoutImportPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCodigo($value);
				break;
			case 2:
				$this->setEdad($value);
				break;
			case 3:
				$this->setPeso($value);
				break;
			case 4:
				$this->setAltura($value);
				break;
			case 5:
				$this->setNombre($value);
				break;
			case 6:
				$this->setFechaNacimiento($value);
				break;
			case 7:
				$this->setFechaScout($value);
				break;
			case 8:
				$this->setLugarScout($value);
				break;
			case 9:
				$this->setObservaciones($value);
				break;
			case 10:
				$this->setActividades($value);
				break;
			case 11:
				$this->setEmail($value);
				break;
			case 12:
				$this->setTelefono($value);
				break;
			case 13:
				$this->setCelular($value);
				break;
			case 14:
				$this->setNacionalidad($value);
				break;
			case 15:
				$this->setIdiomas($value);
				break;
			case 16:
				$this->setXlsFile($value);
				break;
			case 17:
				$this->setAnio($value);
				break;
			case 18:
				$this->setMes($value);
				break;
			case 19:
				$this->setCodigoAgrupador($value);
				break;
			case 20:
				$this->setDia($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ScoutImportPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCodigo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setEdad($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPeso($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAltura($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNombre($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFechaNacimiento($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setFechaScout($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setLugarScout($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setObservaciones($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setActividades($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setEmail($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTelefono($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCelular($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setNacionalidad($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setIdiomas($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setXlsFile($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setAnio($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMes($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCodigoAgrupador($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDia($arr[$keys[20]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ScoutImportPeer::DATABASE_NAME);

		if ($this->isColumnModified(ScoutImportPeer::ID)) $criteria->add(ScoutImportPeer::ID, $this->id);
		if ($this->isColumnModified(ScoutImportPeer::CODIGO)) $criteria->add(ScoutImportPeer::CODIGO, $this->codigo);
		if ($this->isColumnModified(ScoutImportPeer::EDAD)) $criteria->add(ScoutImportPeer::EDAD, $this->edad);
		if ($this->isColumnModified(ScoutImportPeer::PESO)) $criteria->add(ScoutImportPeer::PESO, $this->peso);
		if ($this->isColumnModified(ScoutImportPeer::ALTURA)) $criteria->add(ScoutImportPeer::ALTURA, $this->altura);
		if ($this->isColumnModified(ScoutImportPeer::NOMBRE)) $criteria->add(ScoutImportPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(ScoutImportPeer::FECHA_NACIMIENTO)) $criteria->add(ScoutImportPeer::FECHA_NACIMIENTO, $this->fecha_nacimiento);
		if ($this->isColumnModified(ScoutImportPeer::FECHA_SCOUT)) $criteria->add(ScoutImportPeer::FECHA_SCOUT, $this->fecha_scout);
		if ($this->isColumnModified(ScoutImportPeer::LUGAR_SCOUT)) $criteria->add(ScoutImportPeer::LUGAR_SCOUT, $this->lugar_scout);
		if ($this->isColumnModified(ScoutImportPeer::OBSERVACIONES)) $criteria->add(ScoutImportPeer::OBSERVACIONES, $this->observaciones);
		if ($this->isColumnModified(ScoutImportPeer::ACTIVIDADES)) $criteria->add(ScoutImportPeer::ACTIVIDADES, $this->actividades);
		if ($this->isColumnModified(ScoutImportPeer::EMAIL)) $criteria->add(ScoutImportPeer::EMAIL, $this->email);
		if ($this->isColumnModified(ScoutImportPeer::TELEFONO)) $criteria->add(ScoutImportPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(ScoutImportPeer::CELULAR)) $criteria->add(ScoutImportPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(ScoutImportPeer::NACIONALIDAD)) $criteria->add(ScoutImportPeer::NACIONALIDAD, $this->nacionalidad);
		if ($this->isColumnModified(ScoutImportPeer::IDIOMAS)) $criteria->add(ScoutImportPeer::IDIOMAS, $this->idiomas);
		if ($this->isColumnModified(ScoutImportPeer::XLS_FILE)) $criteria->add(ScoutImportPeer::XLS_FILE, $this->xls_file);
		if ($this->isColumnModified(ScoutImportPeer::ANIO)) $criteria->add(ScoutImportPeer::ANIO, $this->anio);
		if ($this->isColumnModified(ScoutImportPeer::MES)) $criteria->add(ScoutImportPeer::MES, $this->mes);
		if ($this->isColumnModified(ScoutImportPeer::CODIGO_AGRUPADOR)) $criteria->add(ScoutImportPeer::CODIGO_AGRUPADOR, $this->codigo_agrupador);
		if ($this->isColumnModified(ScoutImportPeer::DIA)) $criteria->add(ScoutImportPeer::DIA, $this->dia);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ScoutImportPeer::DATABASE_NAME);
		$criteria->add(ScoutImportPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ScoutImport (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{
		$copyObj->setCodigo($this->codigo);
		$copyObj->setEdad($this->edad);
		$copyObj->setPeso($this->peso);
		$copyObj->setAltura($this->altura);
		$copyObj->setNombre($this->nombre);
		$copyObj->setFechaNacimiento($this->fecha_nacimiento);
		$copyObj->setFechaScout($this->fecha_scout);
		$copyObj->setLugarScout($this->lugar_scout);
		$copyObj->setObservaciones($this->observaciones);
		$copyObj->setActividades($this->actividades);
		$copyObj->setEmail($this->email);
		$copyObj->setTelefono($this->telefono);
		$copyObj->setCelular($this->celular);
		$copyObj->setNacionalidad($this->nacionalidad);
		$copyObj->setIdiomas($this->idiomas);
		$copyObj->setXlsFile($this->xls_file);
		$copyObj->setAnio($this->anio);
		$copyObj->setMes($this->mes);
		$copyObj->setCodigoAgrupador($this->codigo_agrupador);
		$copyObj->setDia($this->dia);

		$copyObj->setNew(true);
		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ScoutImport Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ScoutImportPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ScoutImportPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->codigo = null;
		$this->edad = null;
		$this->peso = null;
		$this->altura = null;
		$this->nombre = null;
		$this->fecha_nacimiento = null;
		$this->fecha_scout = null;
		$this->lugar_scout = null;
		$this->observaciones = null;
		$this->actividades = null;
		$this->email = null;
		$this->telefono = null;
		$this->celular = null;
		$this->nacionalidad = null;
		$this->idiomas = null;
		$this->xls_file = null;
		$this->anio = null;
		$this->mes = null;
		$this->codigo_agrupador = null;
		$this->dia = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->applyDefaultValues();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseScoutImport:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseScoutImport
